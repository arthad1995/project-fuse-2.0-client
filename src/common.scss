
/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {Keyword | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    //background: linear-gradient($direction, $color-stops);
  }

  @mixin radial-gradient($direction, $color-stops...) {
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-radial-gradient(legacy-direction($direction), $color-stops);
    background: radial-gradient($direction, $color-stops);
  }

// Font family taken from Reboot.css (https://getbootstrap.com/docs/4.0/content/reboot/)
$font-family-sans-serif:
// Safari for OS X and iOS (San Francisco)
-apple-system,
// Chrome < 56 for OS X (San Francisco)
BlinkMacSystemFont,
// Windows
"Segoe UI",
// Android
"Roboto",
// Basic web fallback
"Helvetica Neue", Arial, sans-serif,
// Emoji fonts
"Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol" !default;

$white: hsl(0,100%,100%);

$hue1: 220;
$hue2: 0;

$color-schemes:(
    accent: (
        bg-color: hsl(240, 7%, 27%),
        fg-color: $white,
        border: none
    ),
    accent-light: (
        bg-color: hsl(0, 0%, 10%),
        fg-color: hsl(0, 0%, 88%),
        border: 2px solid #333
    ),
    card: (
        bg-color: $white,
        fg-color: hsl(0, 0%, 20%),
        border: 1px solid rgba(0, 0, 0, 0.2)
    ),

    tone1-1:(
        bg-color: hsl($hue1,100%, 50%),
        fg-color: $white,
        border: none
    ),
    tone1-2:(
        bg-color: hsl($hue1, 60%, 40%),
        fg-color: $white,
        border: none
    ),
    tone1-3: (
        bg-color: hsl($hue1, 100%, 70%),
        fg-color: $white,
        border: none
    ),
    tone1-4:(
        bg-color: hsl($hue1, 100%, 30%),
        fg-color: $white,
        border: none
    ),
    tone1-5:(
        bg-color: hsl($hue1, 70%, 50%),
        fg-color: $white,
        border: none
    ),
    tone1-6:(
        bg-color: hsl($hue1, 60%, 25%),
        fg-color: $white,
        border: none
    ),

    tone2-1:(
        bg-color: hsl($hue2,100%, 50%),
        fg-color: $white,
        border: none
    ),
    tone2-2:(
        bg-color: hsl($hue2, 60%, 40%),
        fg-color: $white,
        border: none
    ),
    tone2-3: (
        bg-color: hsl($hue2, 100%, 70%),
        fg-color: $white,
        border: none
    ),
    tone2-4:(
        bg-color: hsl($hue2, 100%, 30%),
        fg-color: $white,
        border: none
    ),
    tone2-5:(
        bg-color: hsl($hue2, 70%, 50%),
        fg-color: $white,
        border: none
    ),
    tone2-6:(
        bg-color: hsl($hue2, 60%, 25%),
        fg-color: $white,
        border: none
    ),
);

.clearfix:after {
    content: "";
    display: table;
    clear: both;
  }

$glow-amt: 8%;

@each $key, $value in $color-schemes {
    .#{$key}-color{
        background-color: map-get($value, bg-color);
        color: map-get($value, fg-color);
        border: map-get($value, border);
    }
    
    .btn.#{$key}-color, .sm-btn.#{$key}-color, .#{$key}-color-glow{
        $lightbg: lighten(map-get($value, bg-color), $glow-amt);
        $darkbg: darken(map-get($value, bg-color), $glow-amt);
        background-color: map-get($value, bg-color);
        //background: linear-gradient($lightbg, $lightbg, $lightbg,$darkbg);
        color: map-get($value, fg-color);
        border: map-get($value, border);
    }

    .btn.#{$key}-color:hover, .sm-btn.#{$key}-color:hover{
        @if map-has-key($value, hover-bg){
            background-color: darken(map-get($value, hover-bg), $glow-amt);

            $bg: map-get($value, hover-bg);
            $lightbg: lighten($bg, $glow-amt * 0.75);
            $darkbg: darken($bg, $glow-amt);
            $midCol: lighten($bg, $glow-amt * 1.5);
            //background: linear-gradient($lightbg, $midCol, $lightbg, $darkbg);
        }
        @else {
            $bg: darken(map-get($value, bg-color), 15%);
            $lightbg: lighten($bg, $glow-amt);
            $darkbg: darken($bg, $glow-amt);
            $midCol: lighten($bg, $glow-amt * 1.5);

            background-color: darken(map-get($value, bg-color), 8%);
            //background: linear-gradient($lightbg, $midCol, $lightbg, $darkbg);
        }
    }

    .btn.#{$key}-color:disabled{
        $bg: map-get($value, bg-color);
        $lightbg: lighten(desaturate(lighten($bg, 20%), 50%), $glow-amt * 0.75);
        $darkbg: lighten(desaturate(lighten($bg, 20%), 50%), $glow-amt);
        $midCol: lighten(desaturate(lighten($bg, 20%), 50%), $glow-amt * 1.2);
        //background: linear-gradient($lightbg, $midCol, $lightbg, $darkbg);
        box-shadow: 0px 0px 1px gray;
        cursor: default;
        &:hover{
            background: inherit;
            box-shadow: inherit;
        }
    }
}

$breakpoints: (
    sm: 600px,
    md: 900px,
    lg: 1200px,
    x-lg: 1800px
);

$ranges: (
    phone: (
        max: map-get($breakpoints, sm) - 1px
    ),
    tablet-portrait: (
        min: map-get($breakpoints, sm),
        max: map-get($breakpoints, md) - 1px
    ),
    tablet-landscape: (
        min: map-get($breakpoints, md),
        max: map-get($breakpoints, lg) - 1px
    ),
    desktop:(
        min: map-get($breakpoints, lg),
        max: map-get($breakpoints, x-lg)
    ),
    big-desktop:(
        min: map-get($breakpoints, x-lg)
    )
);

@mixin for-phone-only{
    @media(max-width: map-get(map-get($ranges, phone), max)) { @content; }
}

@mixin for-tablet-portrait-up{
    @media(min-width: map-get(map-get($ranges, tablet-portrait), min)) { @content; }
}

@mixin for-tablet-portrait-below{
    @media(max-width: map-get(map-get($ranges, tablet-portrait), max)) { @content; }
}

@mixin for-tablet-landscape-up{
    @media(min-width: map-get(map-get($ranges, tablet-landscape), min)) { @content; }
}

@mixin for-desktop-up{
    @media(min-width: map-get(map-get($ranges, desktop), min)) { @content; }
}

@mixin for-big-desktop-up{
    @media(min-width: map-get(map-get($ranges, big-desktop), min)) { @content; }
}

.hideOnPhone{
    @include for-phone-only {
      display: none;
    }
}

.phoneOnly{
    display: none;
    @include for-phone-only {
      display: block;
    }
}

.pointer{
    cursor: pointer;
}


.visible{
    display:block;
}

.hidden{
    display:none;
}

input{
    border: 1px solid rgba(0,0,0,0.4);
    margin: 0.3rem 1rem;
    max-width: calc(100% - 2rem);
}

.no-border {
    border: 0 none !important;
  }
  
  .border {
    border: 1px solid rgba(0, 0, 0, 0.5);
  }
  
